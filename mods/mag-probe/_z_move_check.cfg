[gcode_macro _Z_MOVE_CHECK]
description: Helper: Check limit and perform move
gcode:
  ##### define defaults ######
  {% set caller = params.CALLER|default('G0')|upper %}
  {% set force = params.FORCE|default(0)|int %}
  ##### z values #####
  {% set z_min = printer['gcode_macro _USER_VARIABLE'].probe_z_min|float %}
  {% set z_act = printer.toolhead.position.z|float %}
  ##### MagProbe state #####
  {% set probe_state = printer['gcode_macro _MAG_PROBE'].state|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% if key is not in ['Z', 'CALLER', 'FORCE'] %}
      {% set get_params = get_params.append(key + params[key]) %}
    {% elif key is in ['Z'] %}
      {% if force == 1 %} ;manual override of probe check
        {% set get_params = get_params.append(key + params[key]) %}
      {% elif probe_state ==  'unknown' %}
        {action_raise_error("%s: MagProbe state %s run \"_MAG_PROBE ACTION=GET_STATUS\"" % (caller, probe_state|upper))}
      {% elif probe_state ==  'docked' %}
        {% set get_params = get_params.append(key + params[key]) %}
      {% elif probe_state ==  'attached' %}
        ##### define move target position depending on absolute_coordinates #####
        {% if printer.gcode_move.absolute_coordinates|lower == 'true' %}
          {% set z_target = params.Z|float %}
        {% else %}
          {% set z_target = z_act + params.Z|float %}
        {% endif %}
        ##### decide if a Z move can be executed #####
        {% if z_target > z_min or z_act < z_target %}
          {% set get_params = get_params.append(key + params[key]) %}              
        {% else %}
          {action_respond_info("%s: Z Moves lower than %.1fmm not allowed with installed probe" % (caller,z_min))}  
        {% endif %}
      {% else %}
        {action_raise_error("%s: MagProbe state %s not valid" % (caller, probe_state|upper))}
      {% endif %}
    {% endif %}
  {% endfor %}
  ##### end of definitions #####
  {caller}.1 {get_params|join(" ")}